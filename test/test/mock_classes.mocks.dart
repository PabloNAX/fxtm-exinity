// Mocks generated by Mockito 5.4.4 from annotations
// in fxtm/test/test/mock_classes.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dio/dio.dart' as _i2;
import 'package:fxtm/core/exceptions/app_error.dart' as _i14;
import 'package:fxtm/core/services/api_client.dart' as _i4;
import 'package:fxtm/core/services/cache_service.dart' as _i6;
import 'package:fxtm/core/services/connectivity_service.dart' as _i9;
import 'package:fxtm/core/services/finnhub_service.dart' as _i10;
import 'package:fxtm/core/services/web_socket_client.dart' as _i11;
import 'package:fxtm/core/services/ws_service.dart' as _i12;
import 'package:fxtm/data/models/candle_data.dart' as _i16;
import 'package:fxtm/data/models/candle_data_api_model.dart' as _i3;
import 'package:fxtm/data/models/forex_pair.dart' as _i13;
import 'package:fxtm/data/models/forex_symbols_api_model.dart' as _i8;
import 'package:fxtm/data/repositories/forex_repository.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:shared_preferences/shared_preferences.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCandleDataApiModel_1 extends _i1.SmartFake
    implements _i3.CandleDataApiModel {
  _FakeCandleDataApiModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i4.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  String get apiBaseUrl => (super.noSuchMethod(
        Invocation.getter(#apiBaseUrl),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#apiBaseUrl),
        ),
      ) as String);
}

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i6.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> cacheForexPairs(List<_i8.ForexSymbolsApiModel>? pairs) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheForexPairs,
          [pairs],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<_i8.ForexSymbolsApiModel>?> getCachedForexPairs() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedForexPairs,
          [],
        ),
        returnValue: _i7.Future<List<_i8.ForexSymbolsApiModel>?>.value(),
      ) as _i7.Future<List<_i8.ForexSymbolsApiModel>?>);

  @override
  _i7.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i9.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> hasConnection() => (super.noSuchMethod(
        Invocation.method(
          #hasConnection,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [FinnhubService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFinnhubService extends _i1.Mock implements _i10.FinnhubService {
  MockFinnhubService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i8.ForexSymbolsApiModel>> fetchForexPairs() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchForexPairs,
          [],
        ),
        returnValue: _i7.Future<List<_i8.ForexSymbolsApiModel>>.value(
            <_i8.ForexSymbolsApiModel>[]),
      ) as _i7.Future<List<_i8.ForexSymbolsApiModel>>);

  @override
  _i7.Future<_i3.CandleDataApiModel> fetchHistoricalData(
    String? symbol, {
    String? resolution,
    int? from,
    int? to,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchHistoricalData,
          [symbol],
          {
            #resolution: resolution,
            #from: from,
            #to: to,
          },
        ),
        returnValue:
            _i7.Future<_i3.CandleDataApiModel>.value(_FakeCandleDataApiModel_1(
          this,
          Invocation.method(
            #fetchHistoricalData,
            [symbol],
            {
              #resolution: resolution,
              #from: from,
              #to: to,
            },
          ),
        )),
      ) as _i7.Future<_i3.CandleDataApiModel>);
}

/// A class which mocks [WebSocketClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketClient extends _i1.Mock implements _i11.WebSocketClient {
  MockWebSocketClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiToken => (super.noSuchMethod(
        Invocation.getter(#apiToken),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#apiToken),
        ),
      ) as String);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<_i7.Stream<dynamic>?> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i7.Future<_i7.Stream<dynamic>?>.value(),
      ) as _i7.Future<_i7.Stream<dynamic>?>);

  @override
  _i7.Future<void> send(String? message) => (super.noSuchMethod(
        Invocation.method(
          #send,
          [message],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWsService extends _i1.Mock implements _i12.WsService {
  MockWsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> subscribeToSymbols(
    List<String>? symbols,
    void Function(_i13.ForexPair)? onPriceUpdate, {
    dynamic Function(_i14.AppError)? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToSymbols,
          [
            symbols,
            onPriceUpdate,
          ],
          {#onError: onError},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void unsubscribeFromAll() => super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromAll,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ForexRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockForexRepository extends _i1.Mock implements _i15.ForexRepository {
  MockForexRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i13.ForexPair>> getForexPairs() => (super.noSuchMethod(
        Invocation.method(
          #getForexPairs,
          [],
        ),
        returnValue: _i7.Future<List<_i13.ForexPair>>.value(<_i13.ForexPair>[]),
      ) as _i7.Future<List<_i13.ForexPair>>);

  @override
  _i7.Future<List<_i16.CandleData>> getHistoricalData(
    String? symbol, {
    String? resolution = r'D',
    int? from,
    int? to,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHistoricalData,
          [symbol],
          {
            #resolution: resolution,
            #from: from,
            #to: to,
          },
        ),
        returnValue:
            _i7.Future<List<_i16.CandleData>>.value(<_i16.CandleData>[]),
      ) as _i7.Future<List<_i16.CandleData>>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i17.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i7.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
